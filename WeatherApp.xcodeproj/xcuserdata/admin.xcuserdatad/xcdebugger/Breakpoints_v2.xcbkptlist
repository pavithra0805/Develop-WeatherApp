<?xml version="1.0" encoding="UTF-8"?>
<Bucket
   uuid = "69B99407-470C-4D86-B6D8-2A42ECCB4CF7"
   type = "1"
   version = "2.0">
   <Breakpoints>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoViewModel.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "23"
            endingLineNumber = "23"
            landmarkName = "getWeatherInfo(userLocation:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - 8b6bfeb6287efde7"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 @Swift.MainActor @Sendable () -&gt; () in WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "114">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - d2cc3ad339c780bc"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "287">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - 4696befe924db4c9"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(4) await resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "91">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - cd752f7b7ed44a2"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "67">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - 5dad06e47299e6a3"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(6) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "291">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - 8b6bfeb6287efdc4"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 @Swift.MainActor @Sendable () -&gt; () in WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "24"
                  endingLineNumber = "24"
                  offsetFromSymbolStart = "114">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - a3b8590bad2f7504"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "304">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - 594971f65ec8c1a9"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(4) await resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "91">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - d32a414d619d8d08"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "67">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - 3a934da1bfbb410e"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(6) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "302">
               </Location>
               <Location
                  uuid = "7D7FC301-EBF9-46E6-AF3E-154524CD13FF - f409a3bdb289d93d"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 @Swift.MainActor @Sendable () -&gt; () in WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "24"
                  endingLineNumber = "24"
                  offsetFromSymbolStart = "134">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "BEAF61F5-B0FB-4F5B-BC8C-89BBCE036764"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "20"
            endingLineNumber = "20"
            landmarkName = "fetchCountryData(with:longitude:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "BEAF61F5-B0FB-4F5B-BC8C-89BBCE036764 - 17cde8d4c0e8a208"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "20"
                  endingLineNumber = "20"
                  offsetFromSymbolStart = "250">
               </Location>
               <Location
                  uuid = "BEAF61F5-B0FB-4F5B-BC8C-89BBCE036764 - 17cde8d4c0e8a208"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "20"
                  endingLineNumber = "20"
                  offsetFromSymbolStart = "265">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "628301D4-6C80-4674-8D9E-FE50BF166515"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "26"
            endingLineNumber = "26"
            landmarkName = "fetchCountryData(with:longitude:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "628301D4-6C80-4674-8D9E-FE50BF166515 - 17cde8d4c0e8a24e"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "1048">
               </Location>
               <Location
                  uuid = "628301D4-6C80-4674-8D9E-FE50BF166515 - ac2ea9553118c014"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(2) await resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "51">
               </Location>
               <Location
                  uuid = "628301D4-6C80-4674-8D9E-FE50BF166515 - b5e280f1be93ee4c"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "205">
               </Location>
               <Location
                  uuid = "628301D4-6C80-4674-8D9E-FE50BF166515 - 21016c8c7749c849"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(6) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "94">
               </Location>
               <Location
                  uuid = "628301D4-6C80-4674-8D9E-FE50BF166515 - 17cde8d4c0e8a24e"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "1018">
               </Location>
               <Location
                  uuid = "628301D4-6C80-4674-8D9E-FE50BF166515 - b5e280f1be93ee4c"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "240">
               </Location>
               <Location
                  uuid = "628301D4-6C80-4674-8D9E-FE50BF166515 - 21016c8c7749c849"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(6) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "91">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "3110E827-3374-4BD5-80CA-F1482310FE70"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "27"
            endingLineNumber = "27"
            landmarkName = "fetchCountryData(with:longitude:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "3110E827-3374-4BD5-80CA-F1482310FE70 - b5e280f1be93edad"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "333">
               </Location>
               <Location
                  uuid = "3110E827-3374-4BD5-80CA-F1482310FE70 - b5e280f1be93edad"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "610">
               </Location>
               <Location
                  uuid = "3110E827-3374-4BD5-80CA-F1482310FE70 - 53f7389234bd29ab"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "149">
               </Location>
               <Location
                  uuid = "3110E827-3374-4BD5-80CA-F1482310FE70 - f00bd0beb26475a9"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(7) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "156">
               </Location>
               <Location
                  uuid = "3110E827-3374-4BD5-80CA-F1482310FE70 - b5e280f1be93edad"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "362">
               </Location>
               <Location
                  uuid = "3110E827-3374-4BD5-80CA-F1482310FE70 - b5e280f1be93edad"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "591">
               </Location>
               <Location
                  uuid = "3110E827-3374-4BD5-80CA-F1482310FE70 - 53f7389234bd29ab"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "145">
               </Location>
               <Location
                  uuid = "3110E827-3374-4BD5-80CA-F1482310FE70 - f00bd0beb26475a9"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(7) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "155">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "08CE58ED-8867-43D9-8D84-3E02CD1BEBD1"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "28"
            endingLineNumber = "28"
            landmarkName = "fetchCountryData(with:longitude:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "08CE58ED-8867-43D9-8D84-3E02CD1BEBD1 - b5e280f1be93ed8e"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "24"
                  endingLineNumber = "24"
                  offsetFromSymbolStart = "1043">
               </Location>
               <Location
                  uuid = "08CE58ED-8867-43D9-8D84-3E02CD1BEBD1 - b5e280f1be93ed8e"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "24"
                  endingLineNumber = "24"
                  offsetFromSymbolStart = "946">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "3123B909-101F-4724-BB41-7ECD6028C400"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "51"
            endingLineNumber = "51"
            landmarkName = "fetchWeatherData(city:state:country:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "3123B909-101F-4724-BB41-7ECD6028C400 - 884e56bb683f34f1"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "52"
                  endingLineNumber = "52"
                  offsetFromSymbolStart = "3507">
               </Location>
               <Location
                  uuid = "3123B909-101F-4724-BB41-7ECD6028C400 - 3b20fa1fcbcb6af0"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(4) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "52"
                  endingLineNumber = "52"
                  offsetFromSymbolStart = "285">
               </Location>
               <Location
                  uuid = "3123B909-101F-4724-BB41-7ECD6028C400 - 884e56bb683f3492"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "51"
                  endingLineNumber = "51"
                  offsetFromSymbolStart = "395">
               </Location>
               <Location
                  uuid = "3123B909-101F-4724-BB41-7ECD6028C400 - 884e56bb683f3492"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "51"
                  endingLineNumber = "51"
                  offsetFromSymbolStart = "691">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "ACECD6BF-4672-418D-B4DF-4A176960B2D5"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "52"
            endingLineNumber = "52"
            landmarkName = "fetchWeatherData(city:state:country:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "ACECD6BF-4672-418D-B4DF-4A176960B2D5 - 884e56bb683f34f1"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "52"
                  endingLineNumber = "52"
                  offsetFromSymbolStart = "3507">
               </Location>
               <Location
                  uuid = "ACECD6BF-4672-418D-B4DF-4A176960B2D5 - 3b20fa1fcbcb6af0"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(4) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "52"
                  endingLineNumber = "52"
                  offsetFromSymbolStart = "285">
               </Location>
               <Location
                  uuid = "ACECD6BF-4672-418D-B4DF-4A176960B2D5 - 884e56bb683f34f1"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "52"
                  endingLineNumber = "52"
                  offsetFromSymbolStart = "1160">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "F303DD76-86F8-4506-AABB-FDBED5007B32"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "54"
            endingLineNumber = "54"
            landmarkName = "fetchWeatherData(city:state:country:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "F303DD76-86F8-4506-AABB-FDBED5007B32 - 884e56bb683f3716"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "55"
                  endingLineNumber = "55"
                  offsetFromSymbolStart = "2801">
               </Location>
               <Location
                  uuid = "F303DD76-86F8-4506-AABB-FDBED5007B32 - 884e56bb683f3737"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "54"
                  endingLineNumber = "54"
                  offsetFromSymbolStart = "1613">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "30"
            endingLineNumber = "30"
            landmarkName = "fetchCountryData(with:longitude:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - b5e280f1be93ed31"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "27"
                  endingLineNumber = "27"
                  offsetFromSymbolStart = "2279">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - 21016c8c7749cb34"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(6) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "27"
                  endingLineNumber = "27"
                  offsetFromSymbolStart = "242">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - f00bd0beb2647535"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(7) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "27"
                  endingLineNumber = "27"
                  offsetFromSymbolStart = "530">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - b5e280f1be93edd0"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "26"
                  endingLineNumber = "26"
                  offsetFromSymbolStart = "1236">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - f27d31a196c20f8e"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(4) await resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "26"
                  endingLineNumber = "26"
                  offsetFromSymbolStart = "52">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - 53f7389234bd29ab"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "145">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - 53f7389234bd29d6"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "26"
                  endingLineNumber = "26"
                  offsetFromSymbolStart = "313">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - f00bd0beb26475a9"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(7) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "155">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - f00bd0beb26475d4"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(7) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "26"
                  endingLineNumber = "26"
                  offsetFromSymbolStart = "267">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - b5e280f1be93ed54"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "30"
                  endingLineNumber = "30"
                  offsetFromSymbolStart = "1275">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - f27d31a196c20f0a"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(4) await resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "30"
                  endingLineNumber = "30"
                  offsetFromSymbolStart = "52">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - 53f7389234bd2937"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "27"
                  endingLineNumber = "27"
                  offsetFromSymbolStart = "144">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - 53f7389234bd2952"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "30"
                  endingLineNumber = "30"
                  offsetFromSymbolStart = "298">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - f00bd0beb2647535"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(7) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "27"
                  endingLineNumber = "27"
                  offsetFromSymbolStart = "158">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - f00bd0beb2647550"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(7) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "30"
                  endingLineNumber = "30"
                  offsetFromSymbolStart = "270">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - 53f7389234bd2952"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "30"
                  endingLineNumber = "30"
                  offsetFromSymbolStart = "144">
               </Location>
               <Location
                  uuid = "5E3C6DC8-E85E-4EDB-A73F-173629F42D59 - f00bd0beb2647550"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(7) suspend resume partial function for WeatherApp.DataManager.fetchCountryData(with: Swift.Double, longitude: Swift.Double) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "30"
                  endingLineNumber = "30"
                  offsetFromSymbolStart = "136">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "646CE9D4-FBEE-43B3-877A-F8A8081F6C02"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "50"
            endingLineNumber = "50"
            landmarkName = "fetchWeatherData(city:state:country:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "646CE9D4-FBEE-43B3-877A-F8A8081F6C02 - 884e56bb683f34b3"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "50"
                  endingLineNumber = "50"
                  offsetFromSymbolStart = "2269">
               </Location>
               <Location
                  uuid = "646CE9D4-FBEE-43B3-877A-F8A8081F6C02 - 32a8f8423014f0cd"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "50"
                  endingLineNumber = "50"
                  offsetFromSymbolStart = "3419">
               </Location>
               <Location
                  uuid = "646CE9D4-FBEE-43B3-877A-F8A8081F6C02 - b1b3362080f2002d"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(2) await resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "50"
                  endingLineNumber = "50"
                  offsetFromSymbolStart = "60">
               </Location>
               <Location
                  uuid = "646CE9D4-FBEE-43B3-877A-F8A8081F6C02 - 884e56bb683f34b3"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "50"
                  endingLineNumber = "50"
                  offsetFromSymbolStart = "255">
               </Location>
               <Location
                  uuid = "646CE9D4-FBEE-43B3-877A-F8A8081F6C02 - 3b20fa1fcbcb6ab2"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(4) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "50"
                  endingLineNumber = "50"
                  offsetFromSymbolStart = "114">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "F8EB1200-00AB-4B2D-AC89-3D775A31E410"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/RequestLocationViewController.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "32"
            endingLineNumber = "32"
            landmarkName = "viewWillAppear(_:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "F8EB1200-00AB-4B2D-AC89-3D775A31E410 - 4659e172e596cd19"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.RequestLocationViewController.viewWillAppear(Swift.Bool) -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/RequestLocationViewController.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "33"
                  endingLineNumber = "33"
                  offsetFromSymbolStart = "52">
               </Location>
               <Location
                  uuid = "F8EB1200-00AB-4B2D-AC89-3D775A31E410 - 4659e172e596cd19"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.RequestLocationViewController.viewWillAppear(Swift.Bool) -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/RequestLocationViewController.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "33"
                  endingLineNumber = "33"
                  offsetFromSymbolStart = "32">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "888783FD-8BE3-4F3C-A092-1509E7842B4D"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "56"
            endingLineNumber = "56"
            landmarkName = "body"
            landmarkType = "24">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "AA7954E2-FE7D-4996-B471-4F0B2347C51C"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "49"
            endingLineNumber = "49"
            landmarkName = "body"
            landmarkType = "24">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "5E609004-8D17-490E-A22C-243D43E8EAB8"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "55"
            endingLineNumber = "55"
            landmarkName = "body"
            landmarkType = "24">
            <Locations>
               <Location
                  uuid = "5E609004-8D17-490E-A22C-243D43E8EAB8 - a7f25719224003b1"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "44"
                  endingLineNumber = "44"
                  offsetFromSymbolStart = "2142">
               </Location>
               <Location
                  uuid = "5E609004-8D17-490E-A22C-243D43E8EAB8 - 91184ac124b0a1b9"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 (SwiftUI.AsyncImagePhase) -&gt; SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "45"
                  endingLineNumber = "45"
                  offsetFromSymbolStart = "563">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "7673148B-3965-4F69-8047-986A8618A83D"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/SearchLocationView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "19"
            endingLineNumber = "19"
            landmarkName = "unknown"
            landmarkType = "0">
            <Locations>
               <Location
                  uuid = "7673148B-3965-4F69-8047-986A8618A83D - b8ace1db020f0ac0"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.SearchLocationView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/SearchLocationView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "21"
                  endingLineNumber = "21"
                  offsetFromSymbolStart = "1410">
               </Location>
               <Location
                  uuid = "7673148B-3965-4F69-8047-986A8618A83D - 8dc5dee4be9cfc43"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in WeatherApp.SearchLocationView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/SearchLocationView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "237">
               </Location>
               <Location
                  uuid = "7673148B-3965-4F69-8047-986A8618A83D - b8ace1db020f0aef"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.SearchLocationView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/SearchLocationView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "1410">
               </Location>
               <Location
                  uuid = "7673148B-3965-4F69-8047-986A8618A83D - 8dc5dee4be9cfc22"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in WeatherApp.SearchLocationView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/SearchLocationView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "237">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "5A269A88-8D75-46D3-9181-CCA61F64F67E"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "27"
            endingLineNumber = "27"
            landmarkName = "body"
            landmarkType = "24">
            <Locations>
               <Location
                  uuid = "5A269A88-8D75-46D3-9181-CCA61F64F67E - 453a227e301e80e4"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "25"
                  endingLineNumber = "25"
                  offsetFromSymbolStart = "497">
               </Location>
               <Location
                  uuid = "5A269A88-8D75-46D3-9181-CCA61F64F67E - 872b37755d08ff7c"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.Button&lt;&lt;&lt;opaque return type of SwiftUI.View.shadow(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "26"
                  endingLineNumber = "26"
                  offsetFromSymbolStart = "1427">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "6008A9EF-2127-4F66-A53A-EF48FDB180C0"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "37"
            endingLineNumber = "37"
            landmarkName = "body"
            landmarkType = "24">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "CCC27FFB-5AF5-4528-B0A4-D552AEF85CCD"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/SearchLocationView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "25"
            endingLineNumber = "25"
            landmarkName = "unknown"
            landmarkType = "0">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "8BB3212D-B851-4EBC-880B-23F04B4C1F1C"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "35"
            endingLineNumber = "35"
            landmarkName = "body"
            landmarkType = "24">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "686524AF-7002-433D-AC41-11ECBD5DB031"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "53"
            endingLineNumber = "53"
            landmarkName = "body"
            landmarkType = "24">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "5090F276-A4EF-43CB-B104-E632F36A07E3"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoViewModel.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "24"
            endingLineNumber = "24"
            landmarkName = "getWeatherInfo(userLocation:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "5090F276-A4EF-43CB-B104-E632F36A07E3 - 8b6bfeb6287efdc4"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 @Swift.MainActor @Sendable () -&gt; () in WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "24"
                  endingLineNumber = "24"
                  offsetFromSymbolStart = "158">
               </Location>
               <Location
                  uuid = "5090F276-A4EF-43CB-B104-E632F36A07E3 - 8b6bfeb6287efdc4"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 @Swift.MainActor @Sendable () -&gt; () in WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "24"
                  endingLineNumber = "24"
                  offsetFromSymbolStart = "114">
               </Location>
               <Location
                  uuid = "5090F276-A4EF-43CB-B104-E632F36A07E3 - f409a3bdb289d93d"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 @Swift.MainActor @Sendable () -&gt; () in WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "24"
                  endingLineNumber = "24"
                  offsetFromSymbolStart = "134">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoViewModel.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "22"
            endingLineNumber = "22"
            landmarkName = "getWeatherInfo(userLocation:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - d2cc3ad339c7835d"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "287">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - 4696befe924db728"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(4) await resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "91">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - cd752f7b7ed4743"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(5) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "67">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - 5dad06e47299e542"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(6) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "291">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - 8b6bfeb6287efde7"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 @Swift.MainActor @Sendable () -&gt; () in WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "23"
                  endingLineNumber = "23"
                  offsetFromSymbolStart = "114">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - b0f9853cc338cf5f"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "148">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - 8cc429ea2da6f32a"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(2) await resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "60">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - d2cc3ad339c7835d"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "73">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - 5dad06e47299e542"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(6) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(location: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "70">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - c0e5ef0f97afee1"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "152">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - 5f9f849380210e4a"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(2) await resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "60">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - a3b8590bad2f76e5"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "73">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - 3a934da1bfbb42ef"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(6) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "70">
               </Location>
               <Location
                  uuid = "845AC753-C0D3-49A3-B7C3-6002354F30EF - c0e5ef0f97afee1"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.WeatherInfoViewModel.getWeatherInfo(userLocation: __C.CLLocation) async -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoViewModel.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "22"
                  endingLineNumber = "22"
                  offsetFromSymbolStart = "148">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "29F1A745-2514-48C6-851C-3060D46AA61A"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "85"
            endingLineNumber = "85"
            landmarkName = "body"
            landmarkType = "24">
            <Locations>
               <Location
                  uuid = "29F1A745-2514-48C6-851C-3060D46AA61A - 12fbdec797552f3a"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.Text)&gt; in closure #5 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "70"
                  endingLineNumber = "70"
                  offsetFromSymbolStart = "62">
               </Location>
               <Location
                  uuid = "29F1A745-2514-48C6-851C-3060D46AA61A - 4cf9bae03d0715fc"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.Text)&gt; in closure #5 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "70"
                  endingLineNumber = "70"
                  offsetFromSymbolStart = "339">
               </Location>
               <Location
                  uuid = "29F1A745-2514-48C6-851C-3060D46AA61A - 5b2de714673fe310"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.Text)&gt; in closure #5 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "70"
                  endingLineNumber = "70"
                  offsetFromSymbolStart = "339">
               </Location>
               <Location
                  uuid = "29F1A745-2514-48C6-851C-3060D46AA61A - 5b2de714673fe333"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.Text)&gt; in closure #5 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "69"
                  endingLineNumber = "69"
                  offsetFromSymbolStart = "339">
               </Location>
               <Location
                  uuid = "29F1A745-2514-48C6-851C-3060D46AA61A - c921d7b494f8d701"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.background&lt;&#x3c4;_0_0 where &#x3c4;_1_0: SwiftUI.ShapeStyle&gt;(_: &#x3c4;_1_0, ignoresSafeAreaEdges: SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.background&lt;&#x3c4;_0_0 where &#x3c4;_1_0: SwiftUI.ShapeStyle&gt;(_: &#x3c4;_1_0, ignoresSafeAreaEdges: SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0)&gt; in closure #5 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "71"
                  endingLineNumber = "71"
                  offsetFromSymbolStart = "604">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8"
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "81"
            endingLineNumber = "81"
            landmarkName = "body"
            landmarkType = "24">
            <Locations>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - 96601fb3bee98adc"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "67"
                  endingLineNumber = "67"
                  offsetFromSymbolStart = "8362">
               </Location>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - 623bb8ce5412a3bd"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #4 (Swift.Bool) -&gt; () in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "67"
                  endingLineNumber = "67"
                  offsetFromSymbolStart = "400">
               </Location>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - d835df61b525b461"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "67"
                  endingLineNumber = "67"
                  offsetFromSymbolStart = "8695">
               </Location>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - 41a5a6a45d2d61fe"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #5 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "68"
                  endingLineNumber = "68"
                  offsetFromSymbolStart = "173">
               </Location>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - 51d3101b3daa348d"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "67"
                  endingLineNumber = "67"
                  offsetFromSymbolStart = "8749">
               </Location>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - 7ea51b65ac1aaf2"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #5 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "68"
                  endingLineNumber = "68"
                  offsetFromSymbolStart = "173">
               </Location>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - 51d3101b3daa34ac"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "66"
                  endingLineNumber = "66"
                  offsetFromSymbolStart = "8749">
               </Location>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - 7ea51b65ac1aaad"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #5 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "67"
                  endingLineNumber = "67"
                  offsetFromSymbolStart = "173">
               </Location>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - 85e30e5672c397d9"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "67"
                  endingLineNumber = "67"
                  offsetFromSymbolStart = "9039">
               </Location>
               <Location
                  uuid = "29BA7973-53E1-4F3B-B90D-DA6D0ED1EDC8 - 7b24ce43d838c3a6"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #5 (__C.MKLocalSearchCompletion) -&gt; &lt;&lt;opaque return type of SwiftUI.View.onTapGesture(count: Swift.Int, perform: () -&gt; ()) -&gt; some&gt;&gt;.0 in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "68"
                  endingLineNumber = "68"
                  offsetFromSymbolStart = "175">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "02828757-A765-49A6-B359-C6A75704A9E7"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/RequestLocationViewController.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "70"
            endingLineNumber = "70"
            landmarkName = "locationManager(_:didUpdateLocations:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "02828757-A765-49A6-B359-C6A75704A9E7 - e93dc36ac6cd01bf"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.RequestLocationViewController.locationManager(_: __C.CLLocationManager, didUpdateLocations: Swift.Array&lt;__C.CLLocation&gt;) -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/RequestLocationViewController.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "71"
                  endingLineNumber = "71"
                  offsetFromSymbolStart = "330">
               </Location>
               <Location
                  uuid = "02828757-A765-49A6-B359-C6A75704A9E7 - e93dc36ac6cd01bf"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.RequestLocationViewController.locationManager(_: __C.CLLocationManager, didUpdateLocations: Swift.Array&lt;__C.CLLocation&gt;) -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/RequestLocationViewController.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "71"
                  endingLineNumber = "71"
                  offsetFromSymbolStart = "292">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "58BEBD46-C063-4DB9-AC42-024BFC8FBA54"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "50"
            endingLineNumber = "50"
            landmarkName = "body"
            landmarkType = "24">
            <Locations>
               <Location
                  uuid = "58BEBD46-C063-4DB9-AC42-024BFC8FBA54 - b34d873018b51a40"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.Text in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.Text&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "39"
                  endingLineNumber = "39"
                  offsetFromSymbolStart = "836">
               </Location>
               <Location
                  uuid = "58BEBD46-C063-4DB9-AC42-024BFC8FBA54 - eb26f086628dae86"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.frame(width: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, height: Swift.Optional&lt;CoreGraphics.CGFloat&gt;, alignment: SwiftUI.Alignment) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "40"
                  endingLineNumber = "40"
                  offsetFromSymbolStart = "983">
               </Location>
               <Location
                  uuid = "58BEBD46-C063-4DB9-AC42-024BFC8FBA54 - 17e541330b964101"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "40"
                  endingLineNumber = "40"
                  offsetFromSymbolStart = "983">
               </Location>
               <Location
                  uuid = "58BEBD46-C063-4DB9-AC42-024BFC8FBA54 - 9ad1caf4f2391ab"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "40"
                  endingLineNumber = "40"
                  offsetFromSymbolStart = "983">
               </Location>
               <Location
                  uuid = "58BEBD46-C063-4DB9-AC42-024BFC8FBA54 - 81572c880eb6ad5e"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; &lt;&lt;opaque return type of SwiftUI.View.task(priority: Swift.TaskPriority, _: @Sendable () async -&gt; ()) -&gt; some&gt;&gt;.0 in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "40"
                  endingLineNumber = "40"
                  offsetFromSymbolStart = "983">
               </Location>
               <Location
                  uuid = "58BEBD46-C063-4DB9-AC42-024BFC8FBA54 - fe2663d04f9b3f2f"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, SwiftUI.List&lt;Swift.Never, SwiftUI.ForEach&lt;Swift.Array&lt;__C.MKLocalSearchCompletion&gt;, Swift.String, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0&gt;&gt;)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "40"
                  endingLineNumber = "40"
                  offsetFromSymbolStart = "983">
               </Location>
               <Location
                  uuid = "58BEBD46-C063-4DB9-AC42-024BFC8FBA54 - 57fc23ef7d365dbf"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.Image, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "40"
                  endingLineNumber = "40"
                  offsetFromSymbolStart = "983">
               </Location>
               <Location
                  uuid = "58BEBD46-C063-4DB9-AC42-024BFC8FBA54 - eee7d46c980ede9c"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #3 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(SwiftUI.Button&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0)&gt;&gt;, Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt; in closure #1 () -&gt; SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Button&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0)&gt;&gt;, Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt; in closure #1 () -&gt; SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Button&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0)&gt;&gt;, Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt; in closure #1 () -&gt; SwiftUI.ZStack&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.edgesIgnoringSafeArea(SwiftUI.Edge.Set) -&gt; some&gt;&gt;.0, SwiftUI.ScrollView&lt;SwiftUI.VStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Button&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0)&gt;&gt;, Swift.Optional&lt;SwiftUI.TupleView&lt;(&lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.fontDesign(Swift.Optional&lt;SwiftUI.Font.Design&gt;) -&gt; some&gt;&gt;.0, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(SwiftUI.Text, SwiftUI.AsyncImage&lt;SwiftUI._ConditionalContent&lt;SwiftUI._ConditionalContent&lt;SwiftUI.ProgressView&lt;SwiftUI.EmptyView, SwiftUI.EmptyView&gt;, &lt;&lt;opaque return type of SwiftUI.View.cornerRadius(_: CoreGraphics.CGFloat, antialiased: Swift.Bool) -&gt; some&gt;&gt;.0&gt;, SwiftUI._ConditionalContent&lt;SwiftUI.Image, SwiftUI.Image&gt;&gt;&gt;)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;, SwiftUI.HStack&lt;SwiftUI.TupleView&lt;(WeatherApp.WeatherInfoSubView, WeatherApp.WeatherInfoSubView)&gt;&gt;)&gt;&gt;, &lt;&lt;opaque return type of SwiftUI.View.padding(CoreGraphics.CGFloat) -&gt; some&gt;&gt;.0, &lt;&lt;opaque return type of SwiftUI.View.padding(SwiftUI.Edge.Set, Swift.Optional&lt;CoreGraphics.CGFloat&gt;) -&gt; some&gt;&gt;.0)&gt;&gt;&gt;)&gt;&gt; in closure #1 () -&gt; &lt;&lt;opaque return type of SwiftUI.View.onAppear(perform: Swift.Optional&lt;() -&gt; ()&gt;) -&gt; some&gt;&gt;.0 in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "46"
                  endingLineNumber = "46"
                  offsetFromSymbolStart = "1064">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "F5593D34-C1B1-4726-B13D-BBC0D608A980"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "48"
            endingLineNumber = "48"
            landmarkName = "fetchWeatherData(city:state:country:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "F5593D34-C1B1-4726-B13D-BBC0D608A980 - 884e56bb683f347d"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(3) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "48"
                  endingLineNumber = "48"
                  offsetFromSymbolStart = "2245">
               </Location>
               <Location
                  uuid = "F5593D34-C1B1-4726-B13D-BBC0D608A980 - 32a8f8423014f003"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "48"
                  endingLineNumber = "48"
                  offsetFromSymbolStart = "3230">
               </Location>
               <Location
                  uuid = "F5593D34-C1B1-4726-B13D-BBC0D608A980 - 32a8f8423014f003"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "48"
                  endingLineNumber = "48"
                  offsetFromSymbolStart = "3624">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "8BEF65A5-EB5B-438D-8CAD-BB8F64686A86"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "100"
            endingLineNumber = "100"
            landmarkName = "body"
            landmarkType = "24">
            <Locations>
               <Location
                  uuid = "8BEF65A5-EB5B-438D-8CAD-BB8F64686A86 - 84ff540f8de3506b"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 () -&gt; () in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "87"
                  endingLineNumber = "87"
                  offsetFromSymbolStart = "105">
               </Location>
               <Location
                  uuid = "8BEF65A5-EB5B-438D-8CAD-BB8F64686A86 - 84ff540f8de3506b"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 () -&gt; () in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "87"
                  endingLineNumber = "87"
                  offsetFromSymbolStart = "146">
               </Location>
               <Location
                  uuid = "8BEF65A5-EB5B-438D-8CAD-BB8F64686A86 - a49b6daf9388838e"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 () -&gt; () in closure #1 () -&gt; &lt;&lt;opaque return type of SwiftUI.View.onAppear(perform: Swift.Optional&lt;() -&gt; ()&gt;) -&gt; some&gt;&gt;.0 in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "93"
                  endingLineNumber = "93"
                  offsetFromSymbolStart = "146">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "08815D6B-750C-45E9-8E40-0407327ADCF8"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/WeatherInfoView.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "99"
            endingLineNumber = "99"
            landmarkName = "body"
            landmarkType = "24">
            <Locations>
               <Location
                  uuid = "08815D6B-750C-45E9-8E40-0407327ADCF8 - 84ff540f8de3500a"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 () -&gt; () in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "86"
                  endingLineNumber = "86"
                  offsetFromSymbolStart = "96">
               </Location>
               <Location
                  uuid = "08815D6B-750C-45E9-8E40-0407327ADCF8 - 84ff540f8de3500a"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 () -&gt; () in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "86"
                  endingLineNumber = "86"
                  offsetFromSymbolStart = "98">
               </Location>
               <Location
                  uuid = "08815D6B-750C-45E9-8E40-0407327ADCF8 - 84ff540f8de3500a"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 () -&gt; () in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "86"
                  endingLineNumber = "86"
                  offsetFromSymbolStart = "128">
               </Location>
               <Location
                  uuid = "08815D6B-750C-45E9-8E40-0407327ADCF8 - a49b6daf9388836f"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 () -&gt; () in closure #1 () -&gt; &lt;&lt;opaque return type of SwiftUI.View.onAppear(perform: Swift.Optional&lt;() -&gt; ()&gt;) -&gt; some&gt;&gt;.0 in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "92"
                  endingLineNumber = "92"
                  offsetFromSymbolStart = "98">
               </Location>
               <Location
                  uuid = "08815D6B-750C-45E9-8E40-0407327ADCF8 - a49b6daf9388836f"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "closure #2 () -&gt; () in closure #1 () -&gt; &lt;&lt;opaque return type of SwiftUI.View.onAppear(perform: Swift.Optional&lt;() -&gt; ()&gt;) -&gt; some&gt;&gt;.0 in WeatherApp.WeatherInfoView.body.getter : some"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/WeatherInfoView.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "92"
                  endingLineNumber = "92"
                  offsetFromSymbolStart = "128">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "87E0AF3B-4980-436B-A5C2-5ECDD52627BD"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/DataManager.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "43"
            endingLineNumber = "43"
            landmarkName = "fetchWeatherData(city:state:country:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "87E0AF3B-4980-436B-A5C2-5ECDD52627BD - 32a8f8423014f1e4"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "43"
                  endingLineNumber = "43"
                  offsetFromSymbolStart = "1907">
               </Location>
               <Location
                  uuid = "87E0AF3B-4980-436B-A5C2-5ECDD52627BD - 32a8f8423014f1e4"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "43"
                  endingLineNumber = "43"
                  offsetFromSymbolStart = "2301">
               </Location>
               <Location
                  uuid = "87E0AF3B-4980-436B-A5C2-5ECDD52627BD - 32a8f8423014f1e4"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "(1) suspend resume partial function for WeatherApp.DataManager.fetchWeatherData(city: Swift.String, state: Swift.String, country: Swift.String) async throws -&gt; Swift.Optional&lt;WeatherApp.WeatherOverviewModel&gt;"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/DataManager.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "43"
                  endingLineNumber = "43"
                  offsetFromSymbolStart = "1500">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "E6E6041B-0A36-4CBE-A069-30BB3311BBE7"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/RequestLocationViewController.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "68"
            endingLineNumber = "68"
            landmarkName = "locationManager(_:didUpdateLocations:)"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "E6E6041B-0A36-4CBE-A069-30BB3311BBE7 - e93dc36ac6cd017d"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.RequestLocationViewController.locationManager(_: __C.CLLocationManager, didUpdateLocations: Swift.Array&lt;__C.CLLocation&gt;) -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/RequestLocationViewController.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "69"
                  endingLineNumber = "69"
                  offsetFromSymbolStart = "259">
               </Location>
               <Location
                  uuid = "E6E6041B-0A36-4CBE-A069-30BB3311BBE7 - e93dc36ac6cd017d"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.RequestLocationViewController.locationManager(_: __C.CLLocationManager, didUpdateLocations: Swift.Array&lt;__C.CLLocation&gt;) -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/RequestLocationViewController.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "69"
                  endingLineNumber = "69"
                  offsetFromSymbolStart = "125">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            uuid = "FBA39B82-A23D-4882-BD60-F52ED2B60616"
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "WeatherApp/RequestLocationViewController.swift"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "59"
            endingLineNumber = "59"
            landmarkName = "requestLocation()"
            landmarkType = "7">
            <Locations>
               <Location
                  uuid = "FBA39B82-A23D-4882-BD60-F52ED2B60616 - 9e8ba94a4b6cf651"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.RequestLocationViewController.requestLocation() -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/RequestLocationViewController.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "60"
                  endingLineNumber = "60"
                  offsetFromSymbolStart = "86">
               </Location>
               <Location
                  uuid = "FBA39B82-A23D-4882-BD60-F52ED2B60616 - 9e8ba94a4b6cf651"
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "WeatherApp.RequestLocationViewController.requestLocation() -&gt; ()"
                  moduleName = "WeatherApp"
                  usesParentBreakpointCondition = "Yes"
                  urlString = "file:///Users/admin/Documents/WeatherApp/WeatherApp/RequestLocationViewController.swift"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "60"
                  endingLineNumber = "60"
                  offsetFromSymbolStart = "20">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
   </Breakpoints>
</Bucket>
